#ifdef __USE_CMSIS
#include "LPC17xx.h"
#endif

#include <cr_section_macros.h>

#define FIO0DIR (*(volatile unsigned int *)0x2009c000)
#define FIO0PIN (*(volatile unsigned int *)0x2009c014)
#define MIN (*(volatile unsigned int *)0x40024024)
#define SEC (*(volatile unsigned int *)0x40024020)
#define PINSEL1 (*(volatile unsigned int *)0x4002c004)
#define PCLKSEL0 (*(volatile unsigned int *)0x400FC1A8)
#define I2C0SCLH (*(volatile unsigned int *)0x4001C010)
#define I2C0SCLL (*(volatile unsigned int *)0x4001C014)
#define I2C0CONSET (*(volatile unsigned int *)0x4001C000)
#define I2C0CONCLR (*(volatile unsigned int *)0x4001C018)
#define I2C0DAT (*(volatile unsigned int *) 0x4001C008)
#define I2C0STAT (*(volatile unsigned int *) 0x4001C004)

void start()
{
	//Set the SI bit in the i2c control register
	I2C0CONSET = (1<<3);

	//Set the STA bit in the i2c control register
	I2C0CONSET = (1<<5);

	//Clear the SI bit
	I2C0CONCLR = (1<<3);

	//Wait for the SI bit to return to 1
	while(((I2C0CONSET >> 3) & 1) == 0)
	{

	}
	//Clear the STA bit
	I2C0CONCLR = (1<<5);
}

int read(int a)
{
	int data;

	if(a == 1)
	{
		//Clear the AA bit in the i2c control register
		I2C0CONCLR = (1<<2);
	}

	else
	{
		//To read,set the AA bit in i2c control register
		I2C0CONSET = (1<<2);
	}


	//Clear the SI bit in the i2c control register
	I2C0CONCLR = (1<<3);

	//Wait for the SI bit to return to 1
	while(((I2C0CONSET >> 3) & 1) == 0)
	{

	}
	//Assign the data from the I2CxDAT register
	data = I2C0DAT;
	return data;
}

void write(int data)
{
	//Assign the data to the I2CxDAT register
	I2C0DAT = data;

	//Clear the SI bit
	I2C0CONCLR = (1<<3);

	//Wait for the SI bit to return to 1
	while(((I2C0CONSET >> 3) & 1) == 0)
	{
	}
}

void stop()
{
	//Set the STO bit in the I2C control register
	I2C0CONSET = (1<<4);

	//Clear the SI bit in the I2C control register
	I2C0CONCLR = (1<<3);

	//Wait for the STO bit to return to 0
	while(((I2C0CONSET >> 4) & 1) == 1)
	{
	}
}



void wait_ticks(int ticks)
{
	volatile int count;
	for (count=0; count<ticks; count++){
		//do nothing
	}
}



int main(void) {
  //Testing MIN and SEC registers to see what the values look like
  printf(MIN);
  printf(SEC);
  //Setting MIN and SEC to 0
  MIN = 0;
  SEC = 0;
  
	FIO0DIR |= (1<<22);
	//while(1){
		//FIO0PIN |= (1<<22);
		//wait_ticks(34337);
		//FIO0PIN &= ~(1<<22);
		//wait_ticks(11444);
	//}
  
  if(SEC == 10){
		FIO0PIN |= (1<<22);
		wait_ticks(34337);
		FIO0PIN &= ~(1<<22);
		wait_ticks(11444);
	}
  
  start();
	//Write to EEPROM chip
	write(0b01010000);
	//Access address for IODIRA
	write(0x00);
	//Set all pins to output for IODIRA
	write(0b0000000);
	stop();

	start();
	//Write to IODIRB
	write(0b01000000);
	//Access address for IODIRB
	write(0x01);
	//Set specific pins to output for IODIRB
	write(1<<7);
	stop();
	 return 0 ;
}
